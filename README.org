

* Intro

** Redux Architecture
  Redux consists of the following components:

  - Actions for describing user events, like create, search, clear, filter.
  - Store for keeping the state of the app and reducers.
  - Reducers for the business logic.
  - Selectors as an encapsulation of the tree state shape.
  - React components as the presentational layer.
  - Sagas for IO/networking (side effects) and coordinating async flows

** Redux-MVC Motivations
   
  - Reduce boilerplate by generating action creators and selectors
  - Create reusable self contained namespaces
  - Compose namespaces and create modules
  - Mount and unmount modules and instances anywhere in the tree
  - Observe namespaces and dispatch actions to the global store

* Code Style
  
** Folder layout
   
   #+BEGIN_EXAMPLE
   - Module
     |- SubModule
        |- index (module)
        |- model / handlers (optional to create the )
        |- selectors (reselect)
        |- sagas
        |- api
        |- View (react)
        |- ...
   #+END_EXAMPLE
   
   - 2 Domain levels max
   - You can nest under the folder in the module but everything public 
     should be exported through the index file e.g.: `View/index.js`


   #+BEGIN_EXAMPLE
   - Module
     |- SubModule
        |- index.js (module)
        |- model / handlers (optional to create the )
        |- selectors (reselect)
           |- index.js
           |- byPerson.js
           |- byGroup.js
        |- sagas
        |- api
        |- View (react)
           |- index.js
           |- SearchBar.js
           |- Filters
              |- index.js
              |- CheckBox.js
              |- MultiSelect.js
        |- ...
   #+END_EXAMPLE

** Don't get out of redux architecture
   
   - Don't dispatch callbacks, just flux standard actions or thunks (legacy)
   - Don't use HOC's for state, use redux
   - We have react hooks, use them only for stupid simple view state, like toggle collapse hover
   - Try to avoid double dispatching actions

      #+BEGIN_EXAMPLE
      <div onClick={() => {
        props.setSearch("")
        props.setFilters([])
      }}>
      #+END_EXAMPLE
   
   Instead:

      #+BEGIN_EXAMPLE
      <div onClick={() => {
        props.clearSearchAndFilters()
      }}>
      #+END_EXAMPLE
      
   - Do not write logic when dispatching an action

      #+BEGIN_EXAMPLE
      <div onClick={() => {
        const filters = R.map(f => ({ name: f.name }), props.filters)
        props.setFilters(filters)
      }}>
      #+END_EXAMPLE

** Try to use each part of the architecture
   
  If you see
   
  #+BEGIN_EXAMPLE
  const handlers = createHandlers({
    iniState,
    reducers: {
      onUndoReview: R.identity,
      onApprove: R.identity,
      onDeny: R.identity,
      onRemove: R.identity,
      reviewDone: R.identity,
      fetchManifest: R.identity,
    },
    namespace: "ApproversLabel"
  });
  #+END_EXAMPLE
  
  Be suspicious
  
  This may mean that the buisiness logic may be in other place than reducers
